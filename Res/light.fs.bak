#version 440

layout (binding = 0) uniform sampler2D U_MainTexture;
layout (binding = 1) uniform sampler2D U_ShadowMap;

in vec3 V_Normal;
in vec4 V_WorldPos;
in vec2 V_Texcoord;
in vec4 V_LightSpaceFragPos;

uniform vec3 ViewPos;
uniform int lightOn;

layout (location = 0) out vec4 color;

float CalculateShadow()
{
	vec3 fragPos=V_LightSpaceFragPos.xyz/V_LightSpaceFragPos.w;
	fragPos=fragPos*0.5+vec3(0.5);
	float depthInShadowMap=texture2D(U_ShadowMap,fragPos.xy).r;
	float currentDepth=fragPos.z;
	vec2 texelSize=1.0/textureSize(U_ShadowMap,0);
	float shadow=0.0;
	for(int y=-1;y<=1;++y)
	{
		for(int x=-1;x<=1;++x)
		{
			float pcfDepth=texture2D(U_ShadowMap,fragPos.xy+texelSize*vec2(x,y)).r;
			shadow+=(currentDepth-0.001)>pcfDepth?1.0:0.0;
		}
	}
	shadow/=9.0;
	return shadow;
}

void main()
{
	vec3 lightPos=vec3(1.0,1.0,1.0);
	vec3 L=lightPos;
	L=normalize(L);
	vec3 n=normalize(V_Normal);

	//ambient，环境光照
	vec4 AmbientLightColor=vec4(0.3,0.3,0.3,1.0);
	vec4 AmbientMaterial=vec4(0.3,0.3,0.3,1.0);
	vec4 ambientColor=AmbientLightColor*AmbientMaterial;

	//diffuse，漫反射光照，norm和lightDir向量进行点乘，计算光源对当前片段实际的漫发射影响。
	//结果值再乘以光的颜色，得到漫反射分量。两个向量之间的角度越大，漫反射分量就会越小
	//如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。
	//为此，我们使用max函数返回两个参数之间较大的参数，
	//从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它
	vec4 DiffuseLightColor=vec4(1.0,1.0,1.0,1.0);
	vec4 DiffuseMaterial=vec4(0.8,0.8,0.8,1.0);
	vec4 diffuseColor=DiffuseLightColor*DiffuseMaterial*max(0.0,dot(L,n));

	//specular，镜面光照
	vec4 SpecularLightColor=vec4(1.0,1.0,1.0,1.0);
	vec4 SpecularMaterial=vec4(0.4,0.4,0.4,1.0);
	
	//reflectDir说明：对应的沿着法线轴的反射向量
	vec3 reflectDir=normalize(reflect(-L,n));
	
	//inverse view direction
	//viewDir说明:视线方向向量
	vec3 viewDir=normalize(ViewPos-V_WorldPos.xyz);
	
	//乘以128次方幂，是高光的反光度，越高则高光点越小
	vec4 specularColor=SpecularLightColor*SpecularMaterial*pow(max(0.0,dot(viewDir,reflectDir)),32.0);
	
	if(lightOn == 1)
	{
		color = ambientColor+(diffuseColor+specularColor)*texture2D(U_MainTexture, V_Texcoord);
		color=color*vec4(vec3(1.0-CalculateShadow()),1.0);
	}
	
	if(lightOn == 0)
	{
		color = ambientColor*texture2D(U_MainTexture, V_Texcoord) * 1.5;
	}
}